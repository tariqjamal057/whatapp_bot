import pkg from "@whiskeysockets/baileys";
const {
  default: makeWASocket,
  useMultiFileAuthState,
  fetchLatestBaileysVersion,
  makeCacheableSignalKeyStore,
  DisconnectReason,
} = pkg;

import * as fs from "fs";
import OpenAI from "openai";
import * as dotenv from "dotenv";
import { Low } from "lowdb";
import { JSONFile } from "lowdb/node";
import qrcode from "qrcode-terminal";
import pino from "pino";
import path from "path";
import QRCode from "qrcode";
import { v2 as cloudinary } from "cloudinary";

dotenv.config();

cloudinary.config({
  cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
  api_key: process.env.CLOUDINARY_API_KEY,
  api_secret: process.env.CLOUDINARY_API_SECRET,
});

const logger = pino({
  level: "silent",
});

// load response messages
let response;
try {
  response = JSON.parse(fs.readFileSync("./response.json", "utf8"));
} catch (error) {
  console.error("Error al cargar response.json:", error);
  process.exit(1);
}

// Load countries data
let countriesData;
try {
  countriesData = JSON.parse(fs.readFileSync("./data/countries.json", "utf8"));
} catch (error) {
  console.error("‚ùå Error cargando countries.json:", error);
  process.exit(1);
}

// Load session states
let sessionStatesData;
try {
  sessionStatesData = JSON.parse(
    fs.readFileSync("./data/session-states.json", "utf8")
  );
} catch (error) {
  console.error("‚ùå Error cargando session-states.json:", error);
  process.exit(1);
}

// Load daily rates based on current date
function loadDailyRates() {
  const today = new Date().toISOString().split("T")[0];
  const ratesFile = `./rates/${today}.json`;

  try {
    if (fs.existsSync(ratesFile)) {
      const rates = JSON.parse(fs.readFileSync(ratesFile, "utf8"));
      console.log(`‚úÖ Tasas del d√≠a ${today} cargadas exitosamente`);
      return rates;
    } else {
      console.warn(
        `‚ö†Ô∏è Archivo de tasas para ${today} no encontrado. Usando tasas por defecto.`
      );
      return {
        date: today,
        dominican: {
          range1: { min: 0, max: 2000, rate: 2.11944 },
          range2: { min: 2001, max: 10000, rate: 2.11991 },
          range3: { min: 10001, max: 20000, rate: 2.12061 },
          range4: { min: 20001, max: 9999999, rate: 2.12085 },
        },
        peru: 35.13,
        ecuador: 128.22,
        colombia: 31.038,
        chile: 0.136,
      };
    }
  } catch (error) {
    console.error(`‚ùå Error cargando tasas del d√≠a ${today}:`, error);
    throw error;
  }
}

let dailyRates = loadDailyRates();

// OpenAI Setup with error handling
let openai;
try {
  if (!process.env.OPENAI_API_KEY) {
    throw new Error("OPENAI_API_KEY no encontrada en variables de entorno");
  }
  openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });
  console.log("‚úÖ OpenAI inicializado exitosamente");
} catch (error) {
  console.error("‚ùå Error inicializando OpenAI:", error);
  process.exit(1);
}

// LowDB - Fixed initialization with default data
const defaultData = { users: {}, logs: [], userSessions: {} };
const adapter = new JSONFile("db.json");
const db = new Low(adapter, defaultData);

// Initialize database properly
async function initializeDatabase() {
  try {
    await db.read();

    if (!db.data) {
      db.data = defaultData;
    }
    if (!db.data.users) {
      db.data.users = {};
    }
    if (!db.data.logs) {
      db.data.logs = [];
    }
    if (!db.data.userSessions) {
      db.data.userSessions = {};
    }

    await db.write();
    console.log("‚úÖ Base de datos inicializada correctamente");
  } catch (error) {
    console.error("‚ùå Error inicializando base de datos:", error);
    process.exit(1);
  }
}

await initializeDatabase();

let sock;
let shouldReconnect = true;

// Extract data from loaded files
const countries = countriesData.countries;
const countryDisplayNames = countriesData.displayNames;
const SESSION_STATES = sessionStatesData.SESSION_STATES;

// Helper Functions (Fixed and Integrated)
function detectReceiptMessage(messageText) {
  const lower = messageText.toLowerCase().trim();
  const receiptKeywords = [
    "comprobante",
    "recibo",
    "receipt",
    "voucher",
    "confirmaci√≥n",
    "transferencia realizada",
    "pago realizado",
    "deposito realizado",
    "transfer completed",
    "payment made",
    "deposit made",
    "enviado",
    "transfer√≠",
    "deposit√©",
    "pagu√©",
    "realic√© el pago",
    "hice la transferencia",
  ];

  const documentIndicators = [
    "foto",
    "imagen",
    "captura",
    "screenshot",
    "picture",
    "image",
  ];

  const hasReceiptKeyword = receiptKeywords.some((keyword) =>
    lower.includes(keyword)
  );
  const hasDocumentIndicator = documentIndicators.some((indicator) =>
    lower.includes(indicator)
  );

  return hasReceiptKeyword || hasDocumentIndicator;
}

function isReceiptProperlySigned(messageText) {
  const lower = messageText.toLowerCase().trim();

  const signatureKeywords = [
    "firmado",
    "signed",
    "firma",
    "signature",
    "nombre completo",
    "full name",
    "√∫ltimos 4 d√≠gitos",
    "last 4 digits",
    "whatsapp",
  ];

  const phonePattern = /\d{4}/;
  const namePattern = /[A-Za-z√Ä-√ø]+\s+[A-Za-z√Ä-√ø]+/;

  const hasSignatureKeyword = signatureKeywords.some((keyword) =>
    lower.includes(keyword)
  );
  const hasPhoneDigits = phonePattern.test(messageText);
  const hasName = namePattern.test(messageText);

  return (
    (hasSignatureKeyword && hasPhoneDigits && hasName) ||
    (hasPhoneDigits && hasName)
  );
}

function validateBeneficiaryInfo(text) {
  const lower = text.toLowerCase();

  const requiredFields = {
    name: [
      "nombre",
      "name",
      "apellido",
      "full name",
      "nombre completo",
      "beneficiario",
    ],
    cedula: ["c√©dula", "cedula", "id", "identification", "documento", "ci"],
    account: [
      "cuenta",
      "account",
      "n√∫mero de cuenta",
      "account number",
      "banco",
      "nro cuenta",
    ],
    amount: [
      "monto",
      "amount",
      "cantidad",
      "entregar",
      "deliver",
      "bol√≠vares",
      "bs",
    ],
  };

  const foundFields = {};

  Object.entries(requiredFields).forEach(([field, keywords]) => {
    foundFields[field] = keywords.some((keyword) => lower.includes(keyword));
  });

  const hasCedulaNumber = /\d{7,8}/.test(text);
  const hasAccountNumber = /\d{15,20}/.test(text);
  const hasAmount = /\d+/.test(text);

  const missingFields = [];
  if (!foundFields.name) missingFields.push("Nombre y Apellido");
  if (!foundFields.cedula || !hasCedulaNumber) missingFields.push("C√©dula");
  if (!foundFields.account || !hasAccountNumber)
    missingFields.push("N√∫mero de Cuenta");
  if (!foundFields.amount || !hasAmount) missingFields.push("Monto a Entregar");

  return {
    isValid: missingFields.length === 0,
    missingFields: missingFields,
    foundFields: foundFields,
  };
}

function checkTransferCompletionStatus(userSession) {
  const data = userSession.data || {};
  const hasReceipt = data.receiptReceived && data.receiptSigned;
  const hasBeneficiary = data.beneficiaryComplete || data.beneficiaryInfo;

  return {
    hasReceipt,
    hasBeneficiary,
    isComplete: hasReceipt && hasBeneficiary,
    receiptStatus: data.receiptReceived
      ? data.receiptSigned
        ? "signed"
        : "unsigned"
      : "missing",
    beneficiaryStatus: data.beneficiaryComplete
      ? "complete"
      : data.partialBeneficiaryInfo
      ? "partial"
      : "missing",
  };
}

function validateTransferReadiness(userSession) {
  const data = userSession.data || {};
  const checks = {
    hasCountry: !!data.country,
    hasAmount: !!data.amount,
    hasTransferType: !!data.transferType,
    hasReceipt: !!(data.receiptReceived && data.receiptSigned),
    hasBeneficiary: !!(data.beneficiaryComplete || data.beneficiaryInfo),
    hasKYCIfNeeded: data.kycRequired ? !!data.kycCompleted : true,
  };

  const missingItems = [];
  if (!checks.hasCountry) missingItems.push("Pa√≠s de origen");
  if (!checks.hasAmount) missingItems.push("Monto a enviar");
  if (!checks.hasTransferType) missingItems.push("Tipo de transferencia");
  if (!checks.hasReceipt) missingItems.push("Comprobante firmado");
  if (!checks.hasBeneficiary) missingItems.push("Informaci√≥n del beneficiario");
  if (!checks.hasKYCIfNeeded) missingItems.push("Verificaci√≥n KYC");

  return {
    isReady: missingItems.length === 0,
    missingItems,
    checks,
  };
}

// Enhanced handleSpecialCases function (NOW PROPERLY INTEGRATED)
// function handleSpecialCases(messageText, userSession) {
//   const lower = messageText.toLowerCase().trim();
//   const currentState = userSession.state;

//   console.log('üîç Verificando casos especiales en estado:', currentState);

//   // Handle receipt messages in any state
//   if (detectReceiptMessage(messageText)) {
//     console.log('üìã Mensaje de comprobante detectado');

//     if (!isReceiptProperlySigned(messageText)) {
//       console.log('‚ùå Comprobante sin firma detectado');
//       logSpecialCaseHandling(userSession.sender, messageText, 'unsigned_receipt', 'request_signature', currentState);

//       return {
//         message: "üìã Gracias por el comprobante. üôå Solo necesito que lo firmes con tu nombre y los √∫ltimos cuatro d√≠gitos del n√∫mero de tel√©fono desde el que me escribes. Esto garantiza mayor seguridad y evita retrasos en el proceso. üìå\n\n‚úçÔ∏è **Ejemplo:** Juan P√©rez 1234\n\nPor favor env√≠a el comprobante firmado.",
//         intent: 'receipt_unsigned',
//         newState: currentState
//       };
//     } else {
//       console.log('‚úÖ Comprobante firmado correctamente');

//       if (currentState === SESSION_STATES.AWAITING_BENEFICIARY_INFO) {
//         if (userSession.data && userSession.data.beneficiaryComplete) {
//           console.log('‚úÖ Proceso completo: comprobante + beneficiario');
//           logSpecialCaseHandling(userSession.sender, messageText, 'process_complete', 'finalize_transfer', currentState);

//           return {
//             message: "‚úÖ Perfecto, he recibido el comprobante firmado y la informaci√≥n del beneficiario est√° completa.\n\nüìã Procederemos a validar tu pago y comenzar el proceso de transferencia.\n\n‚è±Ô∏è Te notificaremos cuando est√© listo. Normalmente toma entre 15-30 minutos.\n\n¬øHay algo m√°s en lo que pueda ayudarte?",
//             intent: 'process_complete',
//             newState: SESSION_STATES.INITIAL,
//             sessionData: { receiptReceived: true, receiptSigned: true, processComplete: true }
//           };
//         } else {
//           console.log('üìã Comprobante recibido, falta info beneficiario');
//           return {
//             message: "‚úÖ Comprobante firmado recibido correctamente.\n\nAhora necesito la informaci√≥n del beneficiario:\n\nüìå **Nombre y Apellido:**\nüìå **C√©dula:**\nüìå **N√∫mero de Cuenta:**\nüìå **Monto a Entregar:**",
//             intent: 'receipt_signed_need_beneficiary',
//             newState: SESSION_STATES.AWAITING_BENEFICIARY_INFO,
//             sessionData: { receiptReceived: true, receiptSigned: true }
//           };
//         }
//       } else {
//         console.log('üìã Comprobante recibido sin transferencia activa');
//         return {
//           message: "‚úÖ Comprobante firmado recibido. Para procesar tu transferencia, tambi√©n necesito que sigas el proceso de env√≠o de dinero.\n\n¬øDeseas iniciar una nueva transferencia?",
//           intent: 'receipt_received_no_active_transfer',
//           newState: SESSION_STATES.INITIAL
//         };
//       }
//     }
//   }

//   // Handle potential beneficiary info when in the right state
//   if (currentState === SESSION_STATES.AWAITING_BENEFICIARY_INFO && !detectReceiptMessage(messageText)) {
//     console.log('üìã Validando informaci√≥n de beneficiario');
//     const validation = validateBeneficiaryInfo(messageText);

//     if (!validation.isValid) {
//       console.log('‚ùå Informaci√≥n de beneficiario incompleta:', validation.missingFields);
//       logSpecialCaseHandling(userSession.sender, messageText, 'incomplete_beneficiary', 'request_missing_fields', currentState);

//       let responseMessage = "üìã He recibido tu informaci√≥n, pero necesito que completes algunos datos:\n\n";

//       validation.missingFields.forEach((field, index) => {
//         responseMessage += `${index + 1}Ô∏è‚É£ **${field}**\n`;
//       });

//       responseMessage += "\nüìå **Formato requerido:**\n";
//             responseMessage += "**Nombre y Apellido:** [Nombre completo del beneficiario]\n";
//       responseMessage += "**C√©dula:** [N√∫mero de c√©dula sin puntos ni guiones]\n";
//       responseMessage += "**N√∫mero de Cuenta:** [20 d√≠gitos de la cuenta bancaria]\n";
//       responseMessage += "**Monto a Entregar:** [Cantidad en bol√≠vares]\n\n";
//       responseMessage += "Por favor env√≠a la informaci√≥n completa en este formato.";

//       return {
//         message: responseMessage,
//         intent: 'incomplete_beneficiary_data',
//         newState: SESSION_STATES.AWAITING_BENEFICIARY_INFO,
//         sessionData: {
//           missingFields: validation.missingFields,
//           partialBeneficiaryInfo: messageText
//         }
//       };
//     }
//   }

//   // Handle high amount verification requests
//   if (lower.includes('verificaci√≥n') || lower.includes('verification') ||
//       lower.includes('metamap') || lower.includes('completado')) {
//     if (currentState === SESSION_STATES.KYC_REQUIRED) {
//       console.log('üîê Verificaci√≥n en estado KYC - continuar flujo normal');
//       return null;
//     } else {
//       console.log('üîê Consulta de verificaci√≥n sin transferencia activa');
//       return {
//         message: "üîê Si necesitas completar una verificaci√≥n de identidad, te proporcionar√© el enlace cuando inicies una transferencia que lo requiera.\n\n¬øDeseas enviar dinero ahora?",
//         intent: 'verification_inquiry_no_active_transfer',
//         newState: SESSION_STATES.INITIAL
//       };
//     }
//   }

//   console.log('‚úÖ No se detectaron casos especiales');
//   return null;
// }

// Enhanced logging function (NOW USED)
function logSpecialCaseHandling(
  sender,
  messageText,
  caseType,
  action,
  sessionState
) {
  console.log("üéØ CASO ESPECIAL MANEJADO:", {
    usuario: sender ? sender.split("@")[0] : "unknown",
    caso: caseType,
    accion: action,
    estado: sessionState,
    mensaje: messageText.substring(0, 50) + "...",
    timestamp: new Date().toISOString(),
  });
}

async function connectToWhatsApp() {
  try {
    const { state, saveCreds } = await useMultiFileAuthState("auth");
    const { version } = await fetchLatestBaileysVersion();

    sock = makeWASocket({
      version,
      logger,
      browser: ["Ubuntu", "Chrome", "22.04"],
      auth: {
        creds: state.creds,
        keys: makeCacheableSignalKeyStore(state.keys, logger),
      },
      printQRInTerminal: false,
      defaultQueryTimeoutMs: 60000,
      keepAliveIntervalMs: 30000,
      markOnlineOnConnect: true,
      syncFullHistory: false,
      generateHighQualityLinkPreview: false,
    });

    sock.ev.on("creds.update", saveCreds);

    sock.ev.on(
      "connection.update",
      async ({ connection, lastDisconnect, qr }) => {
        if (qr) {
          console.log("üì≤ Generando c√≥digo QR y subiendo a Cloudinary...");

          try {
            // Generate QR code as buffer
            const qrBuffer = await QRCode.toBuffer(qr, {
              color: {
                dark: "#000000",
                light: "#FFFFFF",
              },
              width: 512,
              type: "png",
            });

            // Upload to Cloudinary
            const uploadResult = await new Promise((resolve, reject) => {
              cloudinary.uploader
                .upload_stream(
                  {
                    resource_type: "image",
                    public_id: `whatsapp-qr-${Date.now()}`,
                    folder: "whatsapp-qr",
                    overwrite: true,
                  },
                  (error, result) => {
                    if (error) reject(error);
                    else resolve(result);
                  }
                )
                .end(qrBuffer);
            });

            console.log(`‚úÖ C√≥digo QR subido exitosamente a Cloudinary`);
            console.log(`üîó URL del QR: ${uploadResult.secure_url}`);
            console.log(
              "üì± Descarga y escanea el QR con WhatsApp (Dispositivos Vinculados)"
            );

            // Store the public_id for later deletion
            global.currentQRPublicId = uploadResult.public_id;
          } catch (error) {
            console.error(
              "‚ùå Error generando/subiendo QR a Cloudinary:",
              error
            );
            // Fallback to terminal QR if Cloudinary upload fails
            try {
              qrcode.generate(qr, { small: true });
            } catch (terminalError) {
              console.error(
                "‚ùå Error mostrando QR en terminal:",
                terminalError
              );
            }
          }
        }

        if (connection === "open") {
          console.log("‚úÖ ¬°Conexi√≥n de WhatsApp establecida!");

          // Delete QR image from Cloudinary after successful connection
          if (global.currentQRPublicId) {
            try {
              await cloudinary.uploader.destroy(global.currentQRPublicId);
              console.log(
                "üóëÔ∏è QR eliminado de Cloudinary despu√©s de la conexi√≥n exitosa"
              );
              delete global.currentQRPublicId;
            } catch (error) {
              console.log(
                "‚ö†Ô∏è No se pudo eliminar el QR de Cloudinary:",
                error.message
              );
            }
          }

          printShareableLink();
        } else if (connection === "close") {
          console.log("‚ùå Conexi√≥n de WhatsApp cerrada");

          const shouldRestart =
            lastDisconnect?.error?.output?.statusCode !==
            DisconnectReason.loggedOut;

          if (shouldRestart && shouldReconnect) {
            console.log("üîÑ Intentando reconectar en 5 segundos...");
            setTimeout(() => {
              connectToWhatsApp();
            }, 5000);
          } else {
            console.log(
              "üõë Bot detenido. Reinicia manualmente si es necesario."
            );
          }
        } else if (connection === "connecting") {
          console.log("üîÑ Conectando a WhatsApp...");
        }
      }
    );

    sock.ev.on("messages.upsert", async ({ messages, type }) => {
      console.log("üì® Evento de mensaje recibido:", {
        type,
        messageCount: messages.length,
      });

      if (type !== "notify") {
        console.log("‚è≠Ô∏è Omitiendo tipo de mensaje no-notify:", type);
        return;
      }

      for (const msg of messages) {
        try {
          const sender = msg.key.remoteJid;
          if (!msg.message || msg.key.fromMe) {
            continue;
          }

          const messageText =
            msg.message?.conversation || msg.message?.extendedTextMessage?.text;
          const imageMessage = msg.message?.imageMessage;

          if (messageText) {
            console.log(
              "üöÄ Manejando mensaje de texto del usuario desde:",
              sender
            );
            await handleUserMessage(sender, messageText);
          } else if (imageMessage) {
            console.log("üñºÔ∏è Manejando imagen del usuario desde:", sender);
            await handleImageMessage(sender, imageMessage);
          }
          // Remove this duplicate section:
          // console.log("üöÄ Manejando mensaje del usuario desde:", sender);
          // await handleUserMessage(sender, messageText);
        } catch (error) {
          console.error("‚ùå Error manejando mensaje:", error);
        }
      }
    });
  } catch (error) {
    console.error("Error conectando a WhatsApp:", error);
    if (shouldReconnect) {
      console.log("üîÑ Reintentando conexi√≥n en 10 segundos...");
      setTimeout(() => {
        connectToWhatsApp();
      }, 10000);
    }
  }
}

function detectEmotionalState(messageText) {
  const lower = messageText.toLowerCase().trim();

  const criticalEmotions = [
    "frustrated",
    "frustrado",
    "enojado",
    "angry",
    "furious",
    "molesto",
    "upset",
    "disappointed",
    "decepcionado",
    "confused",
    "confundido",
    "worried",
    "preocupado",
    "scared",
    "asustado",
    "nervous",
    "nervioso",
    "urgent",
    "urgente",
    "emergency",
    "emergencia",
    "help me",
    "ay√∫dame",
    "this is terrible",
    "esto es terrible",
    "very bad",
    "muy malo",
    "horrible",
    "awful",
    "terrible",
    "disgusted",
    "disgustado",
  ];

  const humanRequests = [
    "speak to someone",
    "hablar con alguien",
    "human",
    "humano",
    "agent",
    "agente",
    "representative",
    "representante",
    "asesor",
    "manager",
    "gerente",
    "supervisor",
    "talk to person",
    "hablar con persona",
    "i need help",
    "necesito ayuda",
    "can someone help",
    "alguien puede ayudar",
  ];

  const operationalIssues = [
    "not working",
    "no funciona",
    "error",
    "problema",
    "issue",
    "broken",
    "roto",
    "failed",
    "fall√≥",
    "can't access",
    "no puedo acceder",
    "unavailable",
    "no disponible",
    "down",
    "ca√≠do",
    "offline",
    "rate not showing",
    "tasa no aparece",
    "can't calculate",
    "no puede calcular",
  ];

  for (const emotion of criticalEmotions) {
    if (lower.includes(emotion)) {
      return {
        needsHuman: true,
        reason: "critical_emotion",
        emotion: emotion,
      };
    }
  }

  for (const request of humanRequests) {
    if (lower.includes(request)) {
      return {
        needsHuman: true,
        reason: "explicit_request",
        request: request,
      };
    }
  }

  for (const issue of operationalIssues) {
    if (lower.includes(issue)) {
      return {
        needsHuman: true,
        reason: "operational_exception",
        issue: issue,
      };
    }
  }

  return {
    needsHuman: false,
    reason: null,
  };
}

// CORRECTED handleUserMessage function with proper integration
async function handleUserMessage(sender, messageText) {
  try {
    console.log("üîÑ Procesando mensaje de:", sender, "Texto:", messageText);

    const emotionalState = detectEmotionalState(messageText);

    if (emotionalState.needsHuman) {
      console.log(
        "üö® Transferencia autom√°tica detectada:",
        emotionalState.reason
      );

      let transferMessage =
        "üôå Te conectaremos con un asesor humano. Un momento por favor‚Ä¶";

      switch (emotionalState.reason) {
        case "critical_emotion":
          transferMessage =
            "Entiendo que esto es importante para ti, y estamos aqu√≠ para ayudarte üïäÔ∏è\n\nüôå Te conectar√© inmediatamente con un asesor humano que podr√° brindarte la atenci√≥n personalizada que necesitas. Un momento por favor‚Ä¶";
          break;
        case "explicit_request":
          transferMessage =
            "üôå Por supuesto, te conectar√© con uno de nuestros asesores humanos. Un momento por favor‚Ä¶";
          break;
        case "operational_exception":
          transferMessage =
            "üîß Veo que hay un problema t√©cnico. Te conectar√© inmediatamente con un asesor humano que podr√° ayudarte a resolverlo. Un momento por favor‚Ä¶";
          break;
      }

      await sock.sendMessage(sender, { text: transferMessage });

      db.data.logs.push({
        sender,
        message: messageText,
        response: transferMessage,
        intent: "automatic_human_transfer",
        transferReason: emotionalState.reason,
        timestamp: new Date().toISOString(),
      });
      await db.write();

      return;
    }

    const rateSituation = detectRateSituation(messageText);
    if (rateSituation) {
      const rateResponse = handleRateSituation(rateSituation);
      if (rateResponse) {
        console.log("üìä Situaci√≥n de tasa detectada:", rateSituation);

        await sock.sendMessage(sender, { text: rateResponse.message });

        db.data.logs.push({
          sender,
          message: messageText,
          response: rateResponse.message,
          intent: rateResponse.intent,
          rateSituation: rateSituation,
          timestamp: new Date().toISOString(),
        });
        await db.write();

        return;
      }
    }

    const amount = extractAmount(messageText);
    if (
      amount &&
      (messageText.toLowerCase().includes("efectivo") ||
        messageText.toLowerCase().includes("cash") ||
        messageText.toLowerCase().includes("entrega f√≠sica"))
    ) {
      const isNet = isNetAmountIntent(messageText);
      const country = detectCountry(messageText.toLowerCase());
      const calculation = calculateCashDeliveryEnhanced(amount, isNet, country);

      if (calculation.success) {
        await sock.sendMessage(sender, { text: calculation.message });

        db.data.logs.push({
          sender,
          message: messageText,
          response: calculation.message,
          intent: "cash_delivery_calculation",
          timestamp: new Date().toISOString(),
        });
        await db.write();

        return;
      }
    }

    // Ensure database structure exists
    if (!db.data) {
      db.data = defaultData;
    }
    if (!db.data.userSessions) {
      db.data.userSessions = {};
    }
    if (!db.data.users) {
      db.data.users = {};
    }
    if (!db.data.logs) {
      db.data.logs = [];
    }

    // Initialize user session if not exists
    if (!db.data.userSessions[sender]) {
      db.data.userSessions[sender] = {
        state: SESSION_STATES.INITIAL,
        data: {},
        lastActivity: new Date().toISOString(),
      };
      console.log("üÜï Nueva sesi√≥n creada para:", sender);
    }

    // Store user in database
    if (!db.data.users[sender]) {
      db.data.users[sender] = {
        firstContact: new Date().toISOString(),
        messageCount: 0,
        lastMessage: new Date().toISOString(),
      };
      console.log("üë§ Nuevo usuario agregado:", sender);
    }
    db.data.users[sender].messageCount++;
    db.data.users[sender].lastMessage = new Date().toISOString();

    const userSession = db.data.userSessions[sender];
    userSession.lastActivity = new Date().toISOString();

    console.log("üéØ Estado actual de sesi√≥n:", userSession.state);

    // FIXED: Check for special cases BEFORE processing normal flow
    const specialCaseResponse = handleSpecialCases(messageText, userSession);

    if (specialCaseResponse) {
      console.log("üéØ Caso especial detectado:", specialCaseResponse.intent);

      await sock.sendMessage(sender, { text: specialCaseResponse.message });

      if (specialCaseResponse.newState) {
        userSession.state = specialCaseResponse.newState;
        console.log("üîÑ Estado actualizado a:", specialCaseResponse.newState);
      }
      if (specialCaseResponse.sessionData) {
        userSession.data = {
          ...userSession.data,
          ...specialCaseResponse.sessionData,
        };
        console.log("üíæ Datos de sesi√≥n actualizados");
      }

      db.data.logs.push({
        sender,
        message: messageText,
        response: specialCaseResponse.message,
        intent: specialCaseResponse.intent,
        sessionState: userSession.state,
        timestamp: new Date().toISOString(),
      });
      await db.write();
      console.log("üíæ Datos guardados en base de datos");

      return;
    }

    const response = await processUserMessage(sender, messageText, userSession);

    if (!response || !response.message) {
      console.error("‚ùå No se gener√≥ respuesta v√°lida");
      throw new Error("No se gener√≥ respuesta v√°lida");
    }

    console.log("üì§ Enviando mensaje a:", sender);
    console.log("üí≠ Respuesta:", response.message.substring(0, 100) + "...");

    await sock.sendMessage(sender, { text: response.message });
    console.log("‚úÖ Mensaje enviado exitosamente");

    if (response.newState) {
      userSession.state = response.newState;
      console.log("üîÑ Estado actualizado a:", response.newState);
    }
    if (response.sessionData) {
      userSession.data = { ...userSession.data, ...response.sessionData };
      console.log("üíæ Datos de sesi√≥n actualizados");
    }

    db.data.logs.push({
      sender,
      message: messageText,
      response: response.message,
      intent: response.intent,
      sessionState: userSession.state,
      timestamp: new Date().toISOString(),
    });
    await db.write();
    console.log("üíæ Datos guardados en base de datos");
  } catch (error) {
    console.error("‚ùå Error en handleUserMessage:", error);
    console.error("‚ùå Stack del error:", error.stack);
    try {
      await sock.sendMessage(sender, {
        text:
          response?.fallback ||
          "Disculpa, hubo un error temporal. Por favor intenta nuevamente.",
      });
      console.log("üì§ Mensaje de respaldo enviado");
    } catch (sendError) {
      console.error("‚ùå Error enviando mensaje de respaldo:", sendError);
    }
  }
}

async function processUserMessage(sender, messageText, userSession) {
  try {
    const lower = messageText.toLowerCase().trim();
    const currentState = userSession.state;

    console.log("üéØ Procesando en estado:", currentState);

    switch (currentState) {
      case SESSION_STATES.INITIAL:
        return handleInitialState(messageText, userSession);

      case SESSION_STATES.SEND_MONEY_STARTED:
        return handleSendMoneyFlow(messageText, userSession);

      case SESSION_STATES.AWAITING_COUNTRY:
        return handleCountryInput(messageText, userSession);

      case SESSION_STATES.AWAITING_AMOUNT:
        return handleAmountInput(messageText, userSession);

      case SESSION_STATES.AWAITING_ACCOUNT_CONFIRMATION:
        return handleAccountConfirmation(messageText, userSession);

      case SESSION_STATES.AWAITING_TRANSFER_TYPE:
        return handleTransferType(messageText, userSession);

      case SESSION_STATES.CASH_DELIVERY:
        return handleCashDelivery(messageText, userSession);

      case SESSION_STATES.AWAITING_BENEFICIARY_INFO:
        return handleBeneficiaryInfo(messageText, userSession);

      case SESSION_STATES.KYC_REQUIRED:
        return handleKYCRequired(messageText, userSession);

      // case SESSION_STATES.AWAITING_RECEIPT:
      //   return handleReceiptInput(messageText, userSession);

      // case SESSION_STATES.AWAITING_RECEIPT_CONFIRMATION:
      //   return handleReceiptConfirmation(messageText, userSession);

      default:
        console.log("‚ö†Ô∏è Estado desconocido, volviendo a inicial");
        return handleInitialState(messageText, userSession);
    }
  } catch (error) {
    console.error("‚ùå Error en processUserMessage:", error);
    return {
      message:
        response.fallback ||
        "Disculpa, hubo un error temporal. Por favor intenta nuevamente.",
      intent: "error",
      newState: SESSION_STATES.INITIAL,
    };
  }
}

function handleInitialState(messageText, userSession) {
  const lower = messageText.toLowerCase().trim();

  console.log("üîç Analizando mensaje inicial:", lower);

  // Enhanced rate calculation handling
  if (isRateCalculationRequest(lower)) {
    return handleRateCalculationRequest(messageText, userSession);
  }

  // Greeting
  if (
    lower.includes("hola") ||
    lower.includes("hi") ||
    lower.includes("hello") ||
    lower.includes("buenos d√≠as") ||
    lower.includes("buenas tardes") ||
    lower.includes("buenas noches") ||
    lower === "hey"
  ) {
    console.log("‚úÖ Detectado: saludo");
    return {
      message: response.greeting,
      intent: "greeting",
      newState: SESSION_STATES.INITIAL,
    };
  }

  // Business hours
  if (
    lower.includes("horario") ||
    lower.includes("business hours") ||
    lower.includes("working hours") ||
    lower.includes("disponible") ||
    lower.includes("abierto") ||
    lower.includes("hours") ||
    lower.includes("available") ||
    lower.includes("open") ||
    lower.includes("when are you") ||
    lower.includes("are you available")
  ) {
    console.log("‚úÖ Detectado: horarios");
    return {
      message: response.business_hours,
      intent: "business_hours",
      newState: SESSION_STATES.INITIAL,
    };
  }

  // Promo
  if (
    lower.includes("promoci√≥n") ||
    lower.includes("promocion") ||
    lower.includes("sorteo") ||
    lower.includes("promo") ||
    lower.includes("sweepstakes") ||
    lower.includes("sweeptakes") ||
    lower.includes("concurso") ||
    lower.includes("cup√≥n") ||
    lower.includes("cupon") ||
    lower.includes("coupons") ||
    lower.includes("coupens") ||
    lower.includes("descuento") ||
    lower.includes("oferta") ||
    lower.includes("any promo")
  ) {
    console.log("‚úÖ Detectado: promociones");
    return {
      message: response.promo,
      intent: "promo",
      newState: SESSION_STATES.INITIAL,
    };
  }

  // Human connect
  if (
    lower.includes("hablar") ||
    lower.includes("asesor") ||
    lower.includes("human") ||
    lower.includes("persona") ||
    lower.includes("connect with human") ||
    lower.includes("agente") ||
    lower.includes("speak to someone") ||
    lower.includes("talk with human") ||
    lower.includes("need to talk") ||
    lower.includes("i'd like to speak") ||
    lower.includes("quiero hablar") ||
    lower.includes("necesito hablar")
  ) {
    console.log("‚úÖ Detectado: solicitud de agente humano");
    return {
      message: response.human,
      intent: "human",
      newState: SESSION_STATES.INITIAL,
    };
  }

  // Send money intent
  if (
    lower.includes("enviar dinero") ||
    lower.includes("quiero enviar") ||
    lower.includes("send money") ||
    lower.includes("transferir") ||
    lower.includes("mandar dinero") ||
    lower.includes("remesa")
  ) {
    console.log("‚úÖ Detectado: enviar dinero");
    return {
      message:
        "¬°Perfecto! üôå Antes de continuar, necesito confirmar algo importante:\n\nüìå ¬øEres el titular de la cuenta bancaria desde la cual se realizar√° la transferencia?",
      intent: "send_money",
      newState: SESSION_STATES.AWAITING_ACCOUNT_CONFIRMATION,
    };
  }

  // Cash delivery
  if (
    lower.includes("efectivo") ||
    lower.includes("cash") ||
    lower.includes("d√≥lares f√≠sicos") ||
    lower.includes("entrega en efectivo") ||
    lower.includes("d√≥lares en mano")
  ) {
    console.log("‚úÖ Detectado: entrega en efectivo");
    return {
      message:
        "‚úÖ Perfecto, puedes enviar d√≥lares en efectivo a Venezuela. üîí Ten en cuenta que este tipo de entrega tiene una comisi√≥n del 10% para cubrir la log√≠stica de entrega f√≠sica en destino.\n\n¬øDesde qu√© pa√≠s est√°s enviando?",
      intent: "cash_delivery",
      newState: SESSION_STATES.CASH_DELIVERY,
      sessionData: { deliveryType: "cash" },
    };
  }

  // Daily rate - enhanced to handle specific queries
  if (
    lower.includes("tipo de cambio") ||
    lower.includes("tasa") ||
    lower.includes("rate") ||
    lower.includes("cambio del d√≠a") ||
    lower.includes("tasa del d√≠a") ||
    lower.includes("daily rate") ||
    lower.includes("exchange rate")
  ) {
    console.log("‚úÖ Detectado: tasa del d√≠a");

    const country = detectCountry(lower);
    const amount = extractAmount(messageText);

    if (country && amount) {
      return handleSpecificRateCalculation(amount, country);
    } else if (country) {
      return handleCountrySpecificRate(country);
    } else if (amount) {
      return {
        message: `Para calcular exactamente cu√°nto recibir√°s por ${formatAmount(
          amount
        )}, necesito saber desde qu√© pa√≠s est√°s enviando.\n\n¬øDesde cu√°l de estos pa√≠ses env√≠as?\nüá©üá¥ Rep√∫blica Dominicana\nüáµüá™ Per√∫\nüá™üá® Ecuador\nüá®üá¥ Colombia\nüá®üá± Chile`,
        intent: "rate_needs_country",
        newState: SESSION_STATES.AWAITING_COUNTRY,
        sessionData: { amount: amount, requestType: "rate_calculation" },
      };
    } else {
      return {
        message: response.daily_rate,
        intent: "daily_rate",
      };
    }
  }

  // Fallback
  console.log("‚úÖ Usando respuesta de fallback");
  return {
    message: response.fallback,
    intent: "fallback",
  };
}

// FIXED: Now properly integrated functions
function isRateCalculationRequest(text) {
  const rateKeywords = ["rate", "tasa", "cambio", "exchange"];
  const calculationKeywords = [
    "how much",
    "cu√°nto",
    "get for",
    "recibo por",
    "por",
  ];
  const amountPattern = /\d+/;

  const hasRateKeyword = rateKeywords.some((keyword) => text.includes(keyword));
  const hasCalculationKeyword = calculationKeywords.some((keyword) =>
    text.includes(keyword)
  );
  const hasAmount = amountPattern.test(text);

  return (hasRateKeyword || hasCalculationKeyword) && hasAmount;
}

function handleRateCalculationRequest(messageText, userSession) {
  const lower = messageText.toLowerCase().trim();
  const amount = extractAmount(messageText);
  const country = detectCountry(lower);

  console.log("üßÆ Procesando solicitud de c√°lculo de tasa:", {
    amount,
    country,
  });

  if (!amount) {
    return {
      message:
        "Por favor especifica el monto que deseas convertir. Ejemplo: '¬øCu√°nto recibo por 5000 pesos?'",
      intent: "rate_calculation_no_amount",
    };
  }

  if (country) {
    return handleSpecificRateCalculation(amount, country);
  } else {
    const inferredCountry = inferCountryFromCurrency(messageText);
    if (inferredCountry) {
      return handleSpecificRateCalculation(amount, inferredCountry);
    } else {
      return {
        message: `Para calcular exactamente cu√°nto recibir√°s por ${formatAmount(
          amount
        )}, necesito saber desde qu√© pa√≠s est√°s enviando.\n\n¬øDesde cu√°l de estos pa√≠ses env√≠as?\nüá©üá¥ Rep√∫blica Dominicana\nüáµüá™ Per√∫\nüá™üá® Ecuador\nüá®üá¥ Colombia\nüá®üá± Chile`,
        intent: "rate_needs_country",
        newState: SESSION_STATES.AWAITING_COUNTRY,
        sessionData: { amount: amount, requestType: "rate_calculation" },
      };
    }
  }
}

function handleSpecificRateCalculation(amount, country) {
  try {
    const rateInfo = calculateRate(amount, country);
    const countryName = getCountryDisplayName(country);

    if (rateInfo.error === "rate_not_loaded" || !rateInfo.rate) {
      return {
        message: `üòì Lo siento, la tasa de hoy a√∫n no ha sido cargada. Por favor consulta m√°s tarde o contacta a un asesor para asistencia inmediata.`,
        intent: "rate_not_loaded",
      };
    }

    let responseMessage = `üí∞ **C√°lculo de tasa para ${countryName}:**\n\n`;
    responseMessage += `üìä Monto a enviar: ${formatCurrency(
      amount,
      country
    )}\n`;
    responseMessage += `üìà Tasa aplicable: ${rateInfo.rate} Bs\n`;
    responseMessage += `üíµ El beneficiario recibir√°: **${rateInfo.receivedAmount} Bs**\n\n`;

    if (country === "dominican") {
      responseMessage += `‚ÑπÔ∏è *Tasa aplicada seg√∫n el rango de monto para Rep√∫blica Dominicana*\n\n`;
    }

    responseMessage += `‚úÖ Esta tasa es v√°lida para el d√≠a de hoy (${dailyRates.date})\n\n`;
    responseMessage += `¬øDeseas proceder con esta transferencia?`;

    return {
      message: responseMessage,
      intent: "rate_calculated",
      sessionData: { amount: amount, country: country, rateInfo: rateInfo },
    };
  } catch (error) {
    console.error("‚ùå Error calculando tasa espec√≠fica:", error);
    return {
      message: `üòì Lo siento, la tasa de hoy a√∫n no ha sido cargada. Por favor consulta m√°s tarde o contacta a un asesor para asistencia inmediata.`,
      intent: "rate_not_loaded",
    };
  }
}

function handleCountrySpecificRate(country) {
  const countryName = getCountryDisplayName(country);
  let responseMessage;

  if (country === "dominican") {
    if (
      !dailyRates.dominican ||
      Object.keys(dailyRates.dominican).length === 0
    ) {
      return {
        message: `üòì Lo siento, la tasa de hoy a√∫n no ha sido cargada. Por favor consulta m√°s tarde o contacta a un asesor para asistencia inmediata.`,
        intent: "rate_not_loaded",
      };
    }

    const ranges = dailyRates.dominican;
    responseMessage = `üìà **Tasas para ${countryName} (${dailyRates.date}):**\n\n`;

    Object.entries(ranges).forEach(([key, range], index) => {
      const rangeText =
        range.max === 9999999
          ? `M√°s de RD${range.min.toLocaleString()}`
          : `RD${range.min.toLocaleString()} - RD${range.max.toLocaleString()}`;
      responseMessage += `${index + 1}Ô∏è‚É£ ${rangeText}: **${range.rate} Bs**\n`;
    });

    responseMessage += `\nüí° *La tasa aplicable depende del monto que env√≠es*\n\n`;
    responseMessage += `¬øQuieres calcular cu√°nto recibir√°s por un monto espec√≠fico?`;
  } else {
    const rate = dailyRates[country];
    if (!rate || rate === 0) {
      return {
        message: `üòì Lo siento, la tasa de hoy a√∫n no ha sido cargada. Por favor consulta m√°s tarde o contacta a un asesor para asistencia inmediata.`,
        intent: "rate_not_loaded",
      };
    }
    responseMessage = `üìà **Tasa para ${countryName} (${dailyRates.date}):**\n\n`;
    responseMessage += `üíµ **${rate} Bs** por cada d√≥lar enviado\n\n`;
    responseMessage += `¬øQuieres calcular cu√°nto recibir√°s por un monto espec√≠fico?`;
  }

  return {
    message: responseMessage,
    intent: "country_rate_shown",
    sessionData: { country: country },
  };
}

function inferCountryFromCurrency(text) {
  const lower = text.toLowerCase();

  if (
    lower.includes("peso") ||
    lower.includes("rd$") ||
    lower.includes("pesos dominicanos")
  ) {
    return "dominican";
  }
  if (lower.includes("sol") || lower.includes("soles")) {
    return "peru";
  }
  if (lower.includes("peso colombiano") || lower.includes("cop")) {
    return "colombia";
  }
  if (lower.includes("peso chileno") || lower.includes("clp")) {
    return "chile";
  }
  if (
    lower.includes("d√≥lar") &&
    (lower.includes("ecuador") || lower.includes("ecuatoriano"))
  ) {
    return "ecuador";
  }

  return null;
}

function formatAmount(amount) {
  if (amount >= 1000) {
    return amount.toLocaleString();
  }
  return amount.toString();
}

function handleSendMoneyFlow(messageText, userSession) {
  return {
    message:
      "¬°Perfecto! üôå Antes de continuar, necesito confirmar algo importante:\n\nüìå ¬øEres el titular de la cuenta bancaria desde la cual se realizar√° la transferencia?",
    intent: "send_money",
    newState: SESSION_STATES.AWAITING_ACCOUNT_CONFIRMATION,
  };
}

function handleAccountConfirmation(messageText, userSession) {
  const lower = messageText.toLowerCase().trim();

  if (
    lower === "s√≠" ||
    lower === "si" ||
    lower === "yes" ||
    lower === "claro" ||
    lower === "por supuesto" ||
    lower === "correcto"
  ) {
    return {
      message:
        "¬°Perfecto! üôå Entonces sigamos con estos pasos:\n\nüìù **Paso 1** - Dime desde qu√© pa√≠s est√°s enviando el dinero:",
      intent: "account_confirmed",
      newState: SESSION_STATES.AWAITING_COUNTRY,
    };
  } else if (lower === "no" || lower === "nope") {
    return {
      message:
        "‚ö†Ô∏è Por favor recuerda que solo aceptamos pagos realizados desde cuentas a nombre del cliente que nos contacta. Esto es por razones de seguridad, para protegerte de posibles fraudes o que un tercero est√© transfiriendo fondos sin tu autorizaci√≥n.\n\n‚úÖ Es indispensable que seas el titular de la cuenta o que informes al titular de la cuenta que se comunique con nosotros.\n\n¬øDeseas continuar desde una cuenta personal?",
      intent: "account_not_confirmed",
      newState: SESSION_STATES.AWAITING_ACCOUNT_CONFIRMATION,
    };
  } else {
    return {
      message:
        "Por favor responde con 'S√≠' o 'No':\n\nüìå ¬øEres el titular de la cuenta bancaria desde la cual se realizar√° la transferencia?",
      intent: "account_confirmation_unclear",
      newState: SESSION_STATES.AWAITING_ACCOUNT_CONFIRMATION,
    };
  }
}

function handleCountryInput(messageText, userSession) {
  const lower = messageText.toLowerCase().trim();
  const country = detectCountry(lower);

  if (country) {
    if (
      userSession.data &&
      userSession.data.requestType === "rate_calculation"
    ) {
      const amount = userSession.data.amount;
      return handleSpecificRateCalculation(amount, country);
    } else {
      return {
        message: `¬°Excelente! Desde ${getCountryDisplayName(
          country
        )} üåé\n\nüìù **Paso 2** - ¬øCu√°l es el monto aproximado que deseas enviar?`,
        intent: "country_detected",
        newState: SESSION_STATES.AWAITING_AMOUNT,
        sessionData: { country: country },
      };
    }
  } else {
    return {
      message:
        "No pude identificar el pa√≠s. Por favor especifica desde cu√°l de estos pa√≠ses est√°s enviando:\n\nüá©üá¥ Rep√∫blica Dominicana\nüáµüá™ Per√∫\nüá™üá® Ecuador\nüá®üá¥ Colombia\nüá®üá± Chile",
      intent: "country_not_detected",
      newState: SESSION_STATES.AWAITING_COUNTRY,
    };
  }
}

function handleAmountInput(messageText, userSession) {
  const amount = extractAmount(messageText);
  const country = userSession.data.country;

  if (!amount) {
    return {
      message:
        "Por favor especifica el monto que deseas enviar. Ejemplo: 500, $300, 15000 pesos",
      intent: "amount_not_detected",
      newState: SESSION_STATES.AWAITING_AMOUNT,
    };
  }

  const rateInfo = calculateRate(amount, country);

  if (rateInfo.error === "rate_not_loaded" || !rateInfo.rate) {
    return {
      message: `üòì Lo siento, la tasa de hoy a√∫n no ha sido cargada. Por favor consulta m√°s tarde o contacta a un asesor para asistencia inmediata.`,
      intent: "rate_not_loaded",
      newState: SESSION_STATES.INITIAL,
    };
  }

  const needsKYC = checkKYCRequirement(amount, country);

  if (needsKYC) {
    return {
      message: `üö® Veo que tu transferencia supera los $300 USD. üîê Por razones de seguridad, debemos verificar que eres el titular de la cuenta. Esto se hace solo una vez, y luego podr√°s enviar montos grandes sin problemas, siempre que uses la misma cuenta.\n\nPor favor verifica en este enlace:\nüîó https://signup.metamap.com/?merchantToken=68221bbbcdc3bb0c6a37635a&flowId=68221bbb70559e84e01b01a1\n\nUna vez completada la verificaci√≥n, podremos proceder con tu transferencia.`,
      intent: "kyc_required",
      newState: SESSION_STATES.KYC_REQUIRED,
      sessionData: { amount: amount, rateInfo: rateInfo, kycRequired: true },
    };
  }

  return {
    message: `üìä **Resumen de tu transferencia:**\n\nüí∞ Monto: ${formatCurrency(
      amount,
      country
    )}\nüåé Desde: ${getCountryDisplayName(country)}\nüìà Tasa aplicable: ${
      rateInfo.rate
    }\nüíµ Recibir√° aproximadamente: ${
      rateInfo.receivedAmount
    } Bs\n\nüìù **Paso 3** - ¬øC√≥mo prefieres realizar el pago?\n\n1Ô∏è‚É£ **Transferencia bancaria**\n2Ô∏è‚É£ **Dep√≥sito en efectivo**\n\nResponde con el n√∫mero de tu opci√≥n preferida.`,
    intent: "amount_processed",
    newState: SESSION_STATES.AWAITING_TRANSFER_TYPE,
    sessionData: { amount: amount, rateInfo: rateInfo },
  };
}

function handleTransferType(messageText, userSession) {
  const lower = messageText.toLowerCase().trim();

  if (lower === "1" || lower.includes("transferencia")) {
    return {
      message: `üìù **Instrucciones para Transferencia Bancaria:**\n\n**Paso 1** - Solicita las cuentas bancarias actualizadas aqu√≠. Las cuentas pueden variar.\n\n**Paso 2** - En el concepto de la transferencia, escribe:\nüìå ENTREGAR: Nombre y apellido del destinatario + los √∫ltimos 5 d√≠gitos de tu WhatsApp.\n\nEjemplo: üëâ ENTREGAR a Mar√≠a P√©rez 55553\n\n**Paso 3** - Despu√©s de transferir, env√≠ame:\n1Ô∏è‚É£ Una foto del comprobante\n2Ô∏è‚É£ La informaci√≥n del beneficiario en este formato:\n\nüìå Nombre y Apellido:\nüìå C√©dula:\nüìå N√∫mero de Cuenta:\nüìå Monto a Entregar:`,
      intent: "transfer_instructions",
      newState: SESSION_STATES.AWAITING_BENEFICIARY_INFO,
      sessionData: { transferType: "bank_transfer" },
    };
  } else if (
    lower === "2" ||
    lower.includes("dep√≥sito") ||
    lower.includes("efectivo")
  ) {
    return {
      message: `üìù **Instrucciones para Dep√≥sito en Efectivo:**\n\n**Paso 1** - Solicita las cuentas bancarias actualizadas aqu√≠. Las cuentas pueden variar.\n‚ö†Ô∏è *No aceptamos pagos T-Pay o *960.\n\n**Paso 2** - Debes escribir en la boleta de dep√≥sito con bol√≠grafo:\nüìå Nombre y apellido del destinatario + √∫ltimos 5 d√≠gitos de tu WhatsApp.\n\nEjemplo: üëâ ENTREGAR a Mar√≠a P√©rez 55553\n\n**Paso 3** - Despu√©s de depositar, env√≠ame:\n1Ô∏è‚É£ Una foto del comprobante\n2Ô∏è‚É£ La informaci√≥n del beneficiario en este formato:\n\nüìå Nombre y Apellido:\nüìå C√©dula:\nüìå N√∫mero de Cuenta:\nüìå Monto a Entregar:`,
      intent: "deposit_instructions",
      newState: SESSION_STATES.AWAITING_BENEFICIARY_INFO,
      sessionData: { transferType: "cash_deposit" },
    };
  } else {
    return {
      message:
        "Por favor selecciona una opci√≥n v√°lida:\n\n1Ô∏è‚É£ **Transferencia bancaria**\n2Ô∏è‚É£ **Dep√≥sito en efectivo**\n\nResponde con el n√∫mero de tu opci√≥n preferida.",
      intent: "transfer_type_unclear",
      newState: SESSION_STATES.AWAITING_TRANSFER_TYPE,
    };
  }
}

function handleReceiptInput(messageText, userSession) {
  if (detectReceiptMessage(messageText)) {
    if (!isReceiptProperlySigned(messageText)) {
      return {
        message:
          'üìã Gracias por enviar el comprobante. Sin embargo, necesito que lo firmes con tu nombre completo y los √∫ltimos 4 d√≠gitos del n√∫mero de WhatsApp desde el que me escribes.\n\n‚úçÔ∏è **Ejemplo de firma:**\n"Juan P√©rez 1234"\n\nEsto garantiza mayor seguridad y evita retrasos en el proceso. Por favor env√≠a el comprobante firmado.',
        intent: "receipt_unsigned",
        newState: SESSION_STATES.AWAITING_RECEIPT,
      };
    } else {
      return {
        message:
          "‚úÖ Perfecto, comprobante recibido y firmado correctamente.\n\nAhora necesito la informaci√≥n del beneficiario en este formato:\n\nüìå **Nombre y Apellido:**\nüìå **C√©dula:**\nüìå **N√∫mero de Cuenta:**\nüìå **Monto a Entregar:**",
        intent: "receipt_signed_need_beneficiary",
        newState: SESSION_STATES.AWAITING_BENEFICIARY_INFO,
        sessionData: { receiptReceived: true, receiptSigned: true },
      };
    }
  } else {
    return {
      message:
        "üì∏ Por favor env√≠a la foto del comprobante de pago firmado con tu nombre completo y los √∫ltimos 4 d√≠gitos de tu WhatsApp.",
      intent: "receipt_needed",
      newState: SESSION_STATES.AWAITING_RECEIPT,
    };
  }
}

function handleCashDelivery(messageText, userSession) {
  const lower = messageText.toLowerCase().trim();
  const country = detectCountry(lower);

  if (country) {
    const amount = extractAmount(messageText);
    if (amount) {
      const calculation = calculateCashDelivery(
        amount,
        isNetAmountIntent(messageText)
      );
      return {
        message: `‚úÖ Perfecto, entrega en efectivo desde ${getCountryDisplayName(
          country
        )}.\n\nüí∞ **C√°lculo con comisi√≥n del 10%:**\n${
          calculation.message
        }\n\nüìù ¬øDeseas proceder con esta transacci√≥n?`,
        intent: "cash_calculation",
        newState: SESSION_STATES.AWAITING_ACCOUNT_CONFIRMATION,
        sessionData: {
          country: country,
          deliveryType: "cash",
          calculation: calculation,
        },
      };
    } else {
      return {
        message: `‚úÖ Perfecto, desde ${getCountryDisplayName(
          country
        )} con entrega en efectivo.\n\nüí∞ ¬øCu√°l es el monto que deseas enviar?`,
        intent: "cash_country_detected",
        newState: SESSION_STATES.AWAITING_AMOUNT,
        sessionData: { country: country, deliveryType: "cash" },
      };
    }
  } else {
    return {
      message:
        "Por favor especifica desde cu√°l de estos pa√≠ses est√°s enviando:\n\nüá©üá¥ Rep√∫blica Dominicana\nüáµüá™ Per√∫\nüá™üá® Ecuador\nüá®üá¥ Colombia\nüá®üá± Chile",
      intent: "cash_country_needed",
      newState: SESSION_STATES.CASH_DELIVERY,
    };
  }
}

// CORRECTED handleBeneficiaryInfo function (NOW PROPERLY INTEGRATED)
function handleBeneficiaryInfo(messageText, userSession) {
  console.log("üìã Procesando informaci√≥n de beneficiario");

  // Check if this is a receipt instead of beneficiary info
  if (detectReceiptMessage(messageText)) {
    console.log(
      "üìã Detectado mensaje de comprobante en lugar de info beneficiario"
    );
    if (!isReceiptProperlySigned(messageText)) {
      return {
        message:
          'üìã Gracias por enviar el comprobante. Sin embargo, necesito que lo firmes con tu nombre completo y los √∫ltimos 4 d√≠gitos del n√∫mero de WhatsApp desde el que me escribes.\n\n‚úçÔ∏è **Ejemplo de firma:**\n"Juan P√©rez 1234"\n\nEsto garantiza mayor seguridad y evita retrasos en el proceso. Por favor env√≠a el comprobante firmado.',
        intent: "receipt_unsigned",
        newState: SESSION_STATES.AWAITING_BENEFICIARY_INFO,
      };
    } else {
      return {
        message:
          "‚úÖ Perfecto, comprobante recibido y firmado correctamente.\n\nAhora necesito la informaci√≥n del beneficiario en este formato:\n\nüìå **Nombre y Apellido:**\nüìå **C√©dula:**\nüìå **N√∫mero de Cuenta:**\nüìå **Monto a Entregar:**",
        intent: "receipt_signed_need_beneficiary",
        newState: SESSION_STATES.AWAITING_BENEFICIARY_INFO,
        sessionData: { receiptReceived: true, receiptSigned: true },
      };
    }
  }

  // Validate beneficiary information
  const validation = validateBeneficiaryInfo(messageText);

  if (validation.isValid) {
    console.log("‚úÖ Informaci√≥n de beneficiario v√°lida");
    const hasReceipt = userSession.data && userSession.data.receiptReceived;

    if (hasReceipt) {
      console.log("‚úÖ Proceso completo: beneficiario + comprobante");
      return {
        message:
          "‚úÖ Perfecto, he recibido toda la informaci√≥n del beneficiario y el comprobante firmado.\n\nüìã Ahora procederemos a validar tu pago y comenzar el proceso de transferencia.\n\n‚è±Ô∏è Te notificaremos cuando el proceso est√© completo. Normalmente toma entre 15-30 minutos.\n\n¬øHay algo m√°s en lo que pueda ayudarte?",
        intent: "beneficiary_info_complete_with_receipt",
        newState: SESSION_STATES.INITIAL,
        sessionData: { beneficiaryInfo: messageText, processComplete: true },
      };
    } else {
      console.log("üìã Info beneficiario completa, falta comprobante");
      return {
        message:
          "‚úÖ Excelente, informaci√≥n del beneficiario recibida correctamente.\n\nAhora necesito que env√≠es el comprobante de pago firmado con:\n‚úçÔ∏è Tu nombre completo + √∫ltimos 4 d√≠gitos de tu WhatsApp\n\nüì∏ Por favor env√≠a la foto del comprobante firmado.",
        intent: "beneficiary_info_received_need_receipt",
        newState: SESSION_STATES.AWAITING_BENEFICIARY_INFO,
        sessionData: {
          beneficiaryInfo: messageText,
          beneficiaryComplete: true,
        },
      };
    }
  } else {
    console.log(
      "‚ùå Informaci√≥n de beneficiario incompleta:",
      validation.missingFields
    );
    let responseMessage =
      "üìã He recibido tu informaci√≥n, pero necesito que completes algunos datos:\n\n";

    validation.missingFields.forEach((field, index) => {
      responseMessage += `${index + 1}Ô∏è‚É£ **${field}**\n`;
    });

    responseMessage += "\nüìå **Formato requerido:**\n";
    responseMessage +=
      "**Nombre y Apellido:** [Nombre completo del beneficiario]\n";
    responseMessage += "**C√©dula:** [N√∫mero de c√©dula sin puntos ni guiones]\n";
    responseMessage +=
      "**N√∫mero de Cuenta:** [20 d√≠gitos de la cuenta bancaria]\n";
    responseMessage += "**Monto a Entregar:** [Cantidad en bol√≠vares]\n\n";
    responseMessage +=
      "Por favor env√≠a la informaci√≥n completa en este formato.";

    return {
      message: responseMessage,
      intent: "incomplete_beneficiary_data",
      newState: SESSION_STATES.AWAITING_BENEFICIARY_INFO,
      sessionData: {
        missingFields: validation.missingFields,
        partialBeneficiaryInfo: messageText,
      },
    };
  }
}

function handleKYCRequired(messageText, userSession) {
  const lower = messageText.toLowerCase().trim();

  if (
    lower.includes("completado") ||
    lower.includes("verificado") ||
    lower.includes("listo") ||
    lower.includes("done") ||
    lower.includes("terminado") ||
    lower.includes("finished")
  ) {
    const country = userSession.data.country;
    const amount = userSession.data.amount;
    const rateInfo = userSession.data.rateInfo;

    return {
      message: `‚úÖ Excelente, hemos recibido tu verificaci√≥n.\n\nüìä **Resumen de tu transferencia:**\n\nüí∞ Monto: ${formatCurrency(
        amount,
        country
      )}\nüåé Desde: ${getCountryDisplayName(country)}\nüìà Tasa aplicable: ${
        rateInfo.rate
      }\nüíµ Recibir√° aproximadamente: ${
        rateInfo.receivedAmount
      } Bs\n\nüìù **Paso 3** - ¬øC√≥mo prefieres realizar el pago?\n\n1Ô∏è‚É£ **Transferencia bancaria**\n2Ô∏è‚É£ **Dep√≥sito en efectivo**\n\nResponde con el n√∫mero de tu opci√≥n preferida.`,
      intent: "kyc_completed",
      newState: SESSION_STATES.AWAITING_TRANSFER_TYPE,
      sessionData: { kycCompleted: true },
    };
  } else {
    return {
      message:
        "Para proceder con transferencias mayores a $300 USD, necesitas completar la verificaci√≥n de identidad.\n\nüîó Por favor completa el proceso en: https://signup.metamap.com/?merchantToken=68221bbbcdc3bb0c6a37635a&flowId=68221bbb70559e84e01b01a1\n\nUna vez completado, escribe 'Completado' para continuar.",
      intent: "kyc_reminder",
      newState: SESSION_STATES.KYC_REQUIRED,
    };
  }
}

// Helper functions
function detectCountry(text) {
  for (const [key, value] of Object.entries(countries)) {
    if (text.includes(key)) {
      return value;
    }
  }
  return null;
}

function getCountryDisplayName(countryCode) {
  return countryDisplayNames[countryCode] || countryCode;
}

function extractAmount(text) {
  const amountRegex = /\$?(\d+(?:,\d{3})*(?:\.\d{2})?)/;
  const match = text.match(amountRegex);
  if (match) {
    return parseFloat(match[1].replace(/,/g, ""));
  }
  return null;
}

function checkKYCRequirement(amount, country) {
  if (country === "dominican") {
    return amount > 20000; // Dominican pesos
  }
  return amount > 300; // USD for other countries
}

function calculateRate(amount, country) {
  try {
    if (country === "dominican") {
      // Check if dominican rates are loaded
      if (
        !dailyRates.dominican ||
        Object.keys(dailyRates.dominican).length === 0
      ) {
        return {
          rate: null,
          receivedAmount: null,
          error: "rate_not_loaded",
        };
      }

      for (const range of Object.values(dailyRates.dominican)) {
        if (amount >= range.min && amount <= range.max) {
          return {
            rate: range.rate,
            receivedAmount: (amount * range.rate).toFixed(2),
          };
        }
      }
      const highestRange = Object.values(dailyRates.dominican).pop();
      return {
        rate: highestRange.rate,
        receivedAmount: (amount * highestRange.rate).toFixed(2),
      };
    } else {
      const rate = dailyRates[country];
      if (!rate || rate === 0) {
        return {
          rate: null,
          receivedAmount: null,
          error: "rate_not_loaded",
        };
      }
      return {
        rate: rate,
        receivedAmount: (amount * rate).toFixed(2),
      };
    }
  } catch (error) {
    console.error("‚ùå Error en calculateRate:", error);
    return {
      rate: null,
      receivedAmount: null,
      error: "rate_not_loaded",
    };
  }
}

function formatCurrency(amount, country) {
  if (country === "dominican") {
    return `RD$${amount.toLocaleString()}`;
  }
  return `$${amount.toLocaleString()}`;
}

function detectRateSituation(messageText) {
  const lower = messageText.toLowerCase().trim();

  const previousDayIndicators = [
    "yesterday",
    "ayer",
    "old rate",
    "tasa anterior",
    "previous",
    "anterior",
    "outdated",
    "desactualizada",
    "from yesterday",
    "de ayer",
    "not today",
    "no es de hoy",
    "wrong date",
    "fecha incorrecta",
  ];

  const rateDoubtIndicators = [
    "is that the real rate",
    "esa es la tasa real",
    "real rate",
    "tasa real",
    "different rate",
    "tasa diferente",
    "saw different",
    "vi diferente",
    "too low",
    "muy baja",
    "too high",
    "muy alta",
    "seems wrong",
    "parece mal",
    "doubt",
    "dudo",
    "suspicious",
    "sospechoso",
    "not right",
    "no est√° bien",
    "other sources",
    "otras fuentes",
    "somewhere else",
    "en otro lado",
  ];

  const rateChangeIndicators = [
    "will change",
    "va a cambiar",
    "rate later",
    "tasa despu√©s",
    "update",
    "actualizar",
    "change during day",
    "cambia durante el d√≠a",
    "vary",
    "var√≠a",
    "fluctuate",
    "fluct√∫a",
    "better rate",
    "mejor tasa",
    "wait for update",
    "esperar actualizaci√≥n",
  ];

  const rateNotLoadedIndicators = [
    "not loaded",
    "no cargada",
    "not available",
    "no disponible",
    "rate missing",
    "falta tasa",
    "no rate",
    "sin tasa",
    "not showing",
    "no aparece",
    "can't see rate",
    "no veo la tasa",
  ];

  for (const indicator of previousDayIndicators) {
    if (lower.includes(indicator)) {
      return "previous_day_rate";
    }
  }

  for (const indicator of rateDoubtIndicators) {
    if (lower.includes(indicator)) {
      return "rate_doubt";
    }
  }

  for (const indicator of rateChangeIndicators) {
    if (lower.includes(indicator)) {
      return "rate_change_inquiry";
    }
  }

  for (const indicator of rateNotLoadedIndicators) {
    if (lower.includes(indicator)) {
      return "rate_not_loaded";
    }
  }

  return null;
}

function handleRateSituation(situation) {
  switch (situation) {
    case "previous_day_rate":
      return {
        message:
          "üïê Las tasas se actualizan diariamente.\n\nPor favor aseg√∫rate de que la fecha mostrada en el enlace corresponda al d√≠a de hoy.\n\n¬øQuieres que un asesor humano te la confirme ahora mismo?",
        intent: "rate_previous_day",
        requiresHumanFollowup: true,
      };

    case "rate_doubt":
      return {
        message:
          "üìå Nuestras tasas son propias y se actualizan diariamente seg√∫n nuestro sistema interno de liquidaci√≥n.\n\nEntendemos que pueden variar de otras fuentes, pero garantizamos transparencia y respaldo en cada env√≠o.\n\n¬øTe gustar√≠a que un asesor revise manualmente la tasa para ti?",
        intent: "rate_doubt",
        requiresHumanFollowup: true,
      };

    case "rate_change_inquiry":
      return {
        message:
          "üîÑ Las tasas pueden variar durante el d√≠a dependiendo del mercado.\n\nLa que te compart√≠ ahora es la tasa actual.\n\n¬øQuieres proceder con esta tasa o prefieres esperar una posible actualizaci√≥n?",
        intent: "rate_change_inquiry",
        requiresHumanFollowup: false,
      };

    case "rate_not_loaded":
      return {
        message:
          "üòì Disculpa, parece que a√∫n no hemos cargado la tasa de hoy.\n\nPor favor consulta m√°s tarde o d√©jame saber si quieres que un asesor te atienda de inmediato.",
        intent: "rate_not_loaded",
        requiresHumanFollowup: true,
      };

    default:
      return null;
  }
}

function calculateCashDeliveryEnhanced(
  amount,
  isNetAmount = false,
  country = null
) {
  try {
    const numAmount = parseFloat(amount);
    if (isNaN(numAmount) || numAmount <= 0) {
      return {
        success: false,
        message: "‚ùå Monto inv√°lido. Por favor ingresa un n√∫mero v√°lido.",
      };
    }

    const commission = 0.1; // 10% commission

    if (isNetAmount) {
      const totalToSend = numAmount / (1 - commission);
      const commissionAmount = totalToSend - numAmount;

      return {
        success: true,
        message: `üßÆ **C√°lculo de Entrega en Efectivo:**\n\nüí∞ Para que reciban exactamente: **${formatCurrency(
          numAmount,
          country
        )}**\nüì§ Debes enviar: **${formatCurrency(
          totalToSend,
          country
        )}**\nüí∏ Comisi√≥n (10%): **${formatCurrency(
          commissionAmount,
          country
        )}**\n\n‚úÖ Confirmado con comisi√≥n del 10% para log√≠stica de entrega f√≠sica.`,
        amountToSend: totalToSend.toFixed(2),
        amountToReceive: numAmount.toFixed(2),
        commission: commissionAmount.toFixed(2),
        commissionPercentage: "10%",
      };
    } else {
      const commissionAmount = numAmount * commission;
      const amountToReceive = numAmount - commissionAmount;

      return {
        success: true,
        message: `üßÆ **C√°lculo de Entrega en Efectivo:**\n\nüì§ Monto a enviar: **${formatCurrency(
          numAmount,
          country
        )}**\nüí∞ Recibir√°n: **${formatCurrency(
          amountToReceive,
          country
        )}**\nüí∏ Comisi√≥n (10%): **${formatCurrency(
          commissionAmount,
          country
        )}**\n\n‚úÖ Despu√©s de aplicar la comisi√≥n del 10% para log√≠stica de entrega f√≠sica.`,
        amountToSend: numAmount.toFixed(2),
        amountToReceive: amountToReceive.toFixed(2),
        commission: commissionAmount.toFixed(2),
        commissionPercentage: "10%",
      };
    }
  } catch (error) {
    console.error("‚ùå Error en calculateCashDeliveryEnhanced:", error);
    return {
      success: false,
      message:
        "‚ùå Error calculando la entrega en efectivo. Por favor intenta nuevamente.",
    };
  }
}

function calculateCashDelivery(amount, isNetAmount = false) {
  const numAmount = parseFloat(amount);
  if (isNaN(numAmount) || numAmount <= 0) {
    return { message: "Monto inv√°lido" };
  }

  if (isNetAmount) {
    const totalToSend = numAmount * 1.1;
    return {
      message: `Si quieres que reciban exactamente ${numAmount.toFixed(
        2
      )}, debes enviar ${totalToSend.toFixed(2)} (incluye comisi√≥n del 10%).`,
      amountToSend: totalToSend.toFixed(2),
      amountToReceive: numAmount.toFixed(2),
      commission: (totalToSend - numAmount).toFixed(2),
    };
  } else {
    const amountToReceive = numAmount / 1.1;
    return {
      message: `Si env√≠as ${numAmount.toFixed(
        2
      )}, despu√©s de la comisi√≥n del 10%, recibir√°n ${amountToReceive.toFixed(
        2
      )}.`,
      amountToSend: numAmount.toFixed(2),
      amountToReceive: amountToReceive.toFixed(2),
      commission: (numAmount - amountToReceive).toFixed(2),
    };
  }
}

function isNetAmountIntent(text) {
  const lower = text.toLowerCase();
  return (
    lower.includes("reciba") ||
    lower.includes("receive") ||
    lower.includes("exacto") ||
    lower.includes("exactly") ||
    lower.includes("en mano") ||
    lower.includes("que le llegue") ||
    lower.includes("que reciba")
  );
}

function printShareableLink() {
  const phone = process.env.WHATSAPP_NUMBER;
  const message = encodeURIComponent(process.env.DEFAULT_MESSAGE || "Hola");
  const link = `https://wa.me/${phone}?text=${message}`;
  console.log("\nüîó Comparte este enlace de WhatsApp con los clientes:");
  console.log(link + "\n");
}

// Handle graceful shutdown
process.on("SIGINT", () => {
  console.log("\nüõë Cerrando bot de manera elegante...");
  shouldReconnect = false;
  if (sock) {
    sock.end();
  }
  process.exit(0);
});

// Admin commands
process.stdin.on("data", async (data) => {
  const cmd = data.toString().trim();
  if (cmd === "rate" || cmd === "tasa") {
    try {
      const msg = response.daily_rate;
      const users = Object.keys(db.data.users);
      console.log(`üì¢ Enviando tasa a ${users.length} usuarios...`);

      for (const number of users) {
        try {
          await sock.sendMessage(number, { text: msg });
          await new Promise((resolve) => setTimeout(resolve, 1000));
        } catch (error) {
          console.error(`Error enviando a ${number}:`, error);
        }
      }
      console.log("‚úÖ Broadcast de tasa completado");
    } catch (error) {
      console.error("Error en broadcast de tasa:", error);
    }
  } else if (cmd === "stats" || cmd === "estadisticas") {
    try {
      const totalUsers = Object.keys(db.data.users).length;
      const totalMessages = db.data.logs.length;
      const activeSessions = Object.keys(db.data.userSessions || {}).length;
      const today = new Date().toISOString().split("T")[0];
      const todayMessages = db.data.logs.filter(
        (log) => log.timestamp && log.timestamp.startsWith(today)
      ).length;

      console.log("\nüìä ESTAD√çSTICAS DEL BOT");
      console.log("========================");
      console.log(`üë• Total usuarios: ${totalUsers}`);
      console.log(`üí¨ Total mensajes: ${totalMessages}`);
      console.log(`üîÑ Sesiones activas: ${activeSessions}`);
      console.log(`üìÖ Mensajes hoy: ${todayMessages}`);
      console.log("========================\n");
    } catch (error) {
      console.error("Error mostrando estad√≠sticas:", error);
    }
  } else if (cmd === "sessions" || cmd === "sesiones") {
    try {
      console.log("\nüîÑ SESIONES ACTIVAS");
      console.log("==================");
      if (db.data.userSessions) {
        Object.entries(db.data.userSessions).forEach(([user, session]) => {
          console.log(`üì± ${user.split("@")[0]}: ${session.state}`);
          if (session.data && session.data.country)
            console.log(`   üåé Pa√≠s: ${session.data.country}`);
          if (session.data && session.data.amount)
            console.log(`   üí∞ Monto: ${session.data.amount}`);
        });
      }
      console.log("==================\n");
    } catch (error) {
      console.error("Error mostrando sesiones:", error);
    }
  } else if (cmd === "reset" || cmd === "reiniciar") {
    try {
      if (!db.data) db.data = {};
      db.data.userSessions = {};
      await db.write();
      console.log("‚úÖ Todas las sesiones han sido reiniciadas");
    } catch (error) {
      console.error("Error reiniciando sesiones:", error);
    }
  } else if (cmd === "reload-rates" || cmd === "recargar-tasas") {
    try {
      dailyRates = loadDailyRates();
      console.log("‚úÖ Tasas recargadas exitosamente");
    } catch (error) {
      console.error("Error recargando tasas:", error);
    }
  } else if (cmd === "help" || cmd === "ayuda") {
    console.log("\nü§ñ COMANDOS DISPONIBLES");
    console.log("=======================");
    console.log("rate/tasa - Enviar tasa a todos los usuarios");
    console.log("stats/estadisticas - Mostrar estad√≠sticas");
    console.log("sessions/sesiones - Mostrar sesiones activas");
    console.log("reset/reiniciar - Reiniciar todas las sesiones");
    console.log("reload-rates/recargar-tasas - Recargar tasas del d√≠a");
    console.log("help/ayuda - Mostrar esta ayuda");
    console.log("=======================\n");
  }
});

// NEW FUNCTIONS FOR RECEIPT AND BENEFICIARY VALIDATION

// function detectReceiptMessage(messageText) {
//   const lower = messageText.toLowerCase().trim();
//   const receiptIndicators = [
//     'comprobante', 'recibo', 'receipt', 'voucher', 'transferencia',
//     'dep√≥sito', 'deposito', 'pago', 'payment', 'transacci√≥n',
//     'transfer√≠', 'deposit√©', 'pagu√©', 'sent', 'transferred'
//   ];

//   return receiptIndicators.some(indicator => lower.includes(indicator));
// }

// function isReceiptProperlySigned(messageText) {
//   const lower = messageText.toLowerCase().trim();

//   // Check for name patterns
//   const hasName = /[a-z√°√©√≠√≥√∫√±]+\s+[a-z√°√©√≠√≥√∫√±]+/i.test(messageText);

//   // Check for 4-digit pattern (last 4 digits of phone)
//   const hasDigits = /\d{4}/.test(messageText);

//   // Check for signature keywords
//   const signatureKeywords = ['firmado', 'signed', 'firma', 'signature'];
//   const hasSignatureKeyword = signatureKeywords.some(keyword => lower.includes(keyword));

//   return (hasName && hasDigits) || hasSignatureKeyword;
// }

// function validateBeneficiaryInfo(messageText) {
//   const lines = messageText.split('\n').filter(line => line.trim());
//   const text = messageText.toLowerCase();

//   const requiredFields = {
//     'Nombre y Apellido': ['nombre', 'apellido', 'name'],
//     'C√©dula': ['c√©dula', 'cedula', 'ci', 'id'],
//     'N√∫mero de Cuenta': ['cuenta', 'account', 'n√∫mero'],
//     'Monto a Entregar': ['monto', 'amount', 'entregar', 'bol√≠vares', 'bs']
//   };

//   const foundFields = [];
//   const missingFields = [];

//   for (const [fieldName, keywords] of Object.entries(requiredFields)) {
//     const fieldFound = keywords.some(keyword => text.includes(keyword));
//     if (fieldFound) {
//       foundFields.push(fieldName);
//     } else {
//       missingFields.push(fieldName);
//     }
//   }

//   // Additional validation for account number format (should be 20 digits)
//   const accountNumberPattern = /\d{20}/;
//   const hasValidAccountNumber = accountNumberPattern.test(messageText);

//   // Additional validation for cedula (should be 7-8 digits)
//   const cedulaPattern = /\d{7,8}/;
//   const hasValidCedula = cedulaPattern.test(messageText);

//   const isValid = foundFields.length >= 3 && hasValidAccountNumber && hasValidCedula;

//   return {
//     isValid,
//     foundFields,
//     missingFields,
//     hasValidAccountNumber,
//     hasValidCedula,
//     fieldCount: foundFields.length
//   };
// }

// Clean old sessions (24 hours)
async function cleanOldSessions() {
  try {
    if (!db.data || !db.data.userSessions) return;

    const oneDayAgo = new Date();
    oneDayAgo.setDate(oneDayAgo.getDate() - 1);

    const initialCount = Object.keys(db.data.userSessions).length;

    for (const [userId, session] of Object.entries(db.data.userSessions)) {
      if (session.lastActivity && new Date(session.lastActivity) < oneDayAgo) {
        delete db.data.userSessions[userId];
      }
    }

    const removedCount =
      initialCount - Object.keys(db.data.userSessions).length;
    if (removedCount > 0) {
      await db.write();
      console.log(`üßπ Limpiadas ${removedCount} sesiones antiguas`);
    }
  } catch (error) {
    console.error("‚ùå Error limpiando sesiones antiguas:", error);
  }
}

// Clean old logs (30 days)
async function cleanOldLogs() {
  try {
    if (!db.data || !db.data.logs) return;

    const thirtyDaysAgo = new Date();
    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);

    const initialCount = db.data.logs.length;
    db.data.logs = db.data.logs.filter(
      (log) => log.timestamp && new Date(log.timestamp) > thirtyDaysAgo
    );

    const removedCount = initialCount - db.data.logs.length;
    if (removedCount > 0) {
      await db.write();
      console.log(`üßπ Limpiados ${removedCount} logs antiguos`);
    }
  } catch (error) {
    console.error("‚ùå Error limpiando logs antiguos:", error);
  }
}

// Rate update function (for manual rate updates)
function updateDailyRates(newRates) {
  try {
    Object.assign(dailyRates, newRates);
    console.log("‚úÖ Tasas actualizadas exitosamente");
    return true;
  } catch (error) {
    console.error("‚ùå Error actualizando tasas:", error);
    return false;
  }
}

// Enhanced logging
function logUserInteraction(
  sender,
  messageText,
  response,
  intent,
  sessionState
) {
  const logEntry = {
    sender,
    message: messageText,
    response: response.message || response,
    intent,
    sessionState,
    timestamp: new Date().toISOString(),
    messageLength: messageText.length,
    responseLength: (response.message || response).length,
  };

  if (!db.data.logs) {
    db.data.logs = [];
  }

  db.data.logs.push(logEntry);

  console.log("üìù Interacci√≥n registrada:", {
    usuario: sender.split("@")[0],
    intent,
    estado: sessionState,
    timestamp: logEntry.timestamp,
  });
}

// Function to create today's rate file if it doesn't exist
function createTodayRateFile() {
  const today = new Date().toISOString().split("T")[0];
  const ratesFile = `./rates/${today}.json`;

  if (!fs.existsSync("./rates")) {
    fs.mkdirSync("./rates", { recursive: true });
  }

  if (!fs.existsSync(ratesFile)) {
    const defaultRates = {
      date: today,
      dominican: {
        range1: { min: 0, max: 2000, rate: 2.11944 },
        range2: { min: 2001, max: 10000, rate: 2.11991 },
        range3: { min: 10001, max: 20000, rate: 2.12061 },
        range4: { min: 20001, max: 9999999, rate: 2.12085 },
      },
      peru: 35.13,
      ecuador: 128.22,
      colombia: 31.038,
      chile: 0.136,
    };

    try {
      fs.writeFileSync(ratesFile, JSON.stringify(defaultRates, null, 2));
      console.log(`‚úÖ Archivo de tasas creado para ${today}`);
    } catch (error) {
      console.error(`‚ùå Error creando archivo de tasas para ${today}:`, error);
    }
  }
}

// Function to check if rates need to be reloaded (daily check)
function checkAndReloadRates() {
  const today = new Date().toISOString().split("T")[0];
  if (dailyRates.date !== today) {
    console.log(
      `üîÑ Detectado cambio de fecha. Recargando tasas para ${today}...`
    );
    try {
      createTodayRateFile();
      dailyRates = loadDailyRates();
      console.log("‚úÖ Tasas recargadas autom√°ticamente");
    } catch (error) {
      console.error("‚ùå Error recargando tasas autom√°ticamente:", error);
    }
  }
}

// Validation functions
function isValidWhatsAppNumber(number) {
  return number && number.includes("@s.whatsapp.net");
}

// Function to get conversation context
function getConversationContext(sender) {
  if (!db.data || !db.data.logs) return "new_user";

  const recentLogs = db.data.logs
    .filter((log) => log.sender === sender)
    .slice(-5);

  if (recentLogs.length === 0) return "new_user";

  const lastIntent = recentLogs[recentLogs.length - 1]?.intent;
  const hasAskedForMoney = recentLogs.some(
    (log) => log.intent === "send_money"
  );
  const hasAskedForRate = recentLogs.some((log) => log.intent === "daily_rate");

  return {
    lastIntent,
    hasAskedForMoney,
    hasAskedForRate,
    isReturningUser: recentLogs.length > 1,
  };
}

// Function to get user stats
function getUserStats(sender) {
  if (!db.data || !db.data.users) return null;

  const user = db.data.users[sender];
  if (!user) return null;

  const userLogs = db.data.logs
    ? db.data.logs.filter((log) => log.sender === sender)
    : [];
  const intents = userLogs.reduce((acc, log) => {
    acc[log.intent] = (acc[log.intent] || 0) + 1;
    return acc;
  }, {});

  return {
    firstContact: user.firstContact,
    messageCount: user.messageCount,
    lastMessage: user.lastMessage,
    topIntents: Object.entries(intents)
      .sort(([, a], [, b]) => b - a)
      .slice(0, 3),
  };
}

// Function to handle cash calculation with better error handling
function handleCashCalculation(text) {
  try {
    const amount = extractAmount(text);
    if (!amount) return null;

    const isNet = isNetAmountIntent(text);
    const calculation = calculateCashDelivery(amount, isNet);

    if (!calculation || calculation.message === "Monto inv√°lido") return null;

    if (isNet) {
      return `‚úÖ Entendido. Si quieres que tu familiar reciba exactamente ${calculation.amountToReceive} en efectivo, debes enviar ${calculation.amountToSend}, ya que aplicamos una comisi√≥n del 10% por la entrega f√≠sica.`;
    } else {
      return `Gracias. Si est√°s enviando ${calculation.amountToSend} en efectivo, despu√©s de aplicar la comisi√≥n del 10%, tu familiar recibir√° aproximadamente ${calculation.amountToReceive} en Venezuela.`;
    }
  } catch (error) {
    console.error("‚ùå Error en handleCashCalculation:", error);
    return null;
  }
}

// Enhanced error handling for specific scenarios
function handleSpecialCases(messageText, userSession) {
  const lower = messageText.toLowerCase().trim();

  // Handle incomplete beneficiary information
  if (userSession.state === SESSION_STATES.AWAITING_BENEFICIARY_INFO) {
    if (!validateBeneficiaryInfo(messageText).isValid) {
      return {
        message: response.incomplete_data,
        intent: "incomplete_data",
        newState: SESSION_STATES.AWAITING_BENEFICIARY_INFO,
      };
    }
  }

  // Handle receipt without signature
  if (lower.includes("comprobante") || lower.includes("recibo")) {
    if (!lower.includes("firmado") && !lower.includes("signed")) {
      return {
        message:
          "üñãÔ∏è Gracias por tu comprobante. üôå Solo necesito que lo firmes con tu nombre y los √∫ltimos cuatro d√≠gitos del n√∫mero de tel√©fono desde el que me escribes. Esto garantiza mayor seguridad y evita retrasos en el proceso. üìå",
        intent: "receipt_unsigned",
      };
    }
  }

  return null;
}

// Function to handle high amount verification requests
function handleHighAmountVerification(amount, country) {
  const isHighAmount = checkKYCRequirement(amount, country);

  if (isHighAmount) {
    return {
      message:
        "üö® Veo que tu transferencia supera los $300 USD. üîê Por razones de seguridad, debemos verificar que eres el titular de la cuenta. Esto se hace solo una vez, y luego podr√°s enviar montos grandes sin problemas, siempre que uses la misma cuenta.\n\nPor favor verifica en este enlace:\nüîó https://signup.metamap.com/?merchantToken=68221bbbcdc3bb0c6a37635a&flowId=68221bbb70559e84e01b01a1",
      requiresVerification: true,
      verificationUrl:
        "https://signup.metamap.com/?merchantToken=68221bbbcdc3bb0c6a37635a&flowId=68221bbb70559e84e01b01a1",
    };
  }

  return null;
}

async function handleImageMessage(sender, imageMessage) {
  try {
    // Get user session
    if (!db.data.userSessions[sender]) {
      db.data.userSessions[sender] = {
        state: SESSION_STATES.INITIAL,
        data: {},
        lastActivity: new Date().toISOString(),
      };
    }

    const userSession = db.data.userSessions[sender];
    const currentState = userSession.state;

    // Only process images when expecting receipt
    if (
      currentState === SESSION_STATES.AWAITING_RECEIPT ||
      currentState === SESSION_STATES.AWAITING_BENEFICIARY_INFO
    ) {
      // Treat image as receipt submission
      const response = {
        message:
          'üì∏ Imagen recibida. Por favor env√≠a tambi√©n un mensaje de texto confirmando que el comprobante est√° firmado con tu nombre completo y los √∫ltimos 4 d√≠gitos de tu WhatsApp.\n\nEjemplo: "Comprobante firmado con Juan P√©rez 1234"',
        intent: "image_receipt_received",
        newState: SESSION_STATES.AWAITING_RECEIPT_CONFIRMATION,
      };

      await sock.sendMessage(sender, { text: response.message });

      // Log the interaction
      db.data.logs.push({
        sender,
        message: "[IMAGE_RECEIVED]",
        response: response.message,
        intent: response.intent,
        sessionState: currentState,
        timestamp: new Date().toISOString(),
      });
      await db.write();
    } else {
      // Image sent in wrong context
      await sock.sendMessage(sender, {
        text: "üì∏ He recibido tu imagen, pero en este momento necesito informaci√≥n de texto. ¬øEn qu√© puedo ayudarte?",
      });
    }
  } catch (error) {
    console.error("‚ùå Error manejando imagen:", error);
    await sock.sendMessage(sender, {
      text: "Disculpa, hubo un error procesando tu imagen. Por favor intenta nuevamente.",
    });
  }
}

function handleReceiptConfirmation(messageText, userSession) {
  const lower = messageText.toLowerCase().trim();

  if (
    lower.includes("firmado") ||
    lower.includes("signed") ||
    lower.includes("comprobante") ||
    isReceiptProperlySigned(messageText)
  ) {
    return {
      message:
        "‚úÖ Perfecto, comprobante recibido y firmado correctamente.\n\nAhora necesito la informaci√≥n del beneficiario en este formato:\n\nüìå **Nombre y Apellido:**\nüìå **C√©dula:**\nüìå **N√∫mero de Cuenta:**\nüìå **Monto a Entregar:**",
      intent: "receipt_confirmed",
      newState: SESSION_STATES.AWAITING_BENEFICIARY_INFO,
      sessionData: { receiptReceived: true, receiptSigned: true },
    };
  } else {
    return {
      message:
        'Por favor confirma que el comprobante est√° firmado con tu nombre completo y los √∫ltimos 4 d√≠gitos de tu WhatsApp.\n\nEjemplo: "Comprobante firmado con Juan P√©rez 1234"',
      intent: "receipt_confirmation_needed",
      newState: SESSION_STATES.AWAITING_RECEIPT_CONFIRMATION,
    };
  }
}

// Function to handle business inquiries
function handleBusinessInquiries(messageText) {
  const lower = messageText.toLowerCase().trim();

  const businessKeywords = [
    "negocio",
    "business",
    "empresa",
    "company",
    "comercial",
    "commercial",
    "volumen",
    "volume",
    "mayorista",
    "wholesale",
    "partnership",
    "sociedad",
  ];

  const hasBusinessKeyword = businessKeywords.some((keyword) =>
    lower.includes(keyword)
  );

  if (hasBusinessKeyword) {
    return {
      message:
        "üè¢ Para consultas comerciales y de alto volumen, te conectaremos con nuestro equipo especializado en soluciones empresariales.\n\nüìû Un asesor comercial se pondr√° en contacto contigo para discutir tus necesidades espec√≠ficas.\n\n¬øPodr√≠as proporcionarme m√°s detalles sobre el tipo de operaci√≥n que necesitas?",
      intent: "business_inquiry",
      requiresHumanFollowup: true,
    };
  }

  return null;
}

// Function to handle complaint or issue reports
function handleComplaintOrIssue(messageText) {
  const lower = messageText.toLowerCase().trim();

  const complaintKeywords = [
    "problema",
    "issue",
    "error",
    "fallo",
    "queja",
    "complaint",
    "reclamo",
    "claim",
    "no funciona",
    "not working",
    "mal servicio",
    "bad service",
    "insatisfecho",
    "unsatisfied",
  ];

  const hasComplaintKeyword = complaintKeywords.some((keyword) =>
    lower.includes(keyword)
  );

  if (hasComplaintKeyword) {
    return {
      message:
        "üòî Lamento escuchar que has tenido una experiencia no satisfactoria. Tu feedback es muy importante para nosotros.\n\nüôå Te conectar√© inmediatamente con un supervisor que podr√° revisar tu caso y brindarte una soluci√≥n personalizada.\n\nUn momento por favor...",
      intent: "complaint_or_issue",
      requiresHumanFollowup: true,
      priority: "high",
    };
  }

  return null;
}

// Function to handle security concerns
function handleSecurityConcerns(messageText) {
  const lower = messageText.toLowerCase().trim();

  const securityKeywords = [
    "seguro",
    "secure",
    "seguridad",
    "security",
    "confiable",
    "trustworthy",
    "fraude",
    "fraud",
    "estafa",
    "scam",
    "robo",
    "theft",
    "hack",
  ];

  const hasSecurityKeyword = securityKeywords.some((keyword) =>
    lower.includes(keyword)
  );

  if (hasSecurityKeyword) {
    return {
      message:
        "üîí La seguridad es nuestra m√°xima prioridad. Contamos con:\n\n‚úÖ Encriptaci√≥n de extremo a extremo\n‚úÖ Verificaci√≥n de identidad obligatoria\n‚úÖ Monitoreo 24/7 de transacciones\n‚úÖ Cumplimiento de regulaciones internacionales\n\nüõ°Ô∏è Todas nuestras operaciones est√°n respaldadas y aseguradas.\n\n¬øTienes alguna preocupaci√≥n espec√≠fica sobre la seguridad?",
      intent: "security_inquiry",
    };
  }

  return null;
}

// Function to detect and handle urgent requests
function detectUrgentRequest(messageText) {
  const lower = messageText.toLowerCase().trim();

  const urgentKeywords = [
    "urgente",
    "urgent",
    "emergencia",
    "emergency",
    "r√°pido",
    "quick",
    "inmediato",
    "immediate",
    "ya",
    "now",
    "prisa",
    "rush",
  ];

  const hasUrgentKeyword = urgentKeywords.some((keyword) =>
    lower.includes(keyword)
  );

  if (hasUrgentKeyword) {
    return {
      message:
        "‚ö° Entiendo que tu solicitud es urgente. Te conectar√© inmediatamente con un asesor que podr√° atenderte con prioridad.\n\nüöÄ Nuestros tiempos de procesamiento est√°ndar son de 15-30 minutos, pero haremos todo lo posible para acelerar tu caso.\n\nUn momento por favor...",
      intent: "urgent_request",
      requiresHumanFollowup: true,
      priority: "urgent",
    };
  }

  return null;
}

// Function to clean up old QR codes from Cloudinary
async function cleanupOldQRCodes() {
  try {
    const result = await cloudinary.api.resources({
      type: 'upload',
      prefix: 'whatsapp-qr/',
      max_results: 100
    });
    
    const oneDayAgo = new Date();
    oneDayAgo.setDate(oneDayAgo.getDate() - 1);
    
    for (const resource of result.resources) {
      const createdAt = new Date(resource.created_at);
      if (createdAt < oneDayAgo) {
        await cloudinary.uploader.destroy(resource.public_id);
        console.log(`üßπ QR antiguo eliminado: ${resource.public_id}`);
      }
    }
  } catch (error) {
    console.error("‚ùå Error limpiando QRs antiguos:", error);
  }
}

// Run cleanup every 6 hours
setInterval(cleanupOldQRCodes, 6 * 60 * 60 * 1000);
// Start cleanup intervals
setInterval(cleanOldSessions, 6 * 60 * 60 * 1000); // Every 6 hours
setInterval(cleanOldLogs, 24 * 60 * 60 * 1000); // Every 24 hours
setInterval(checkAndReloadRates, 60 * 60 * 1000); // Every hour

// Create today's rate file on startup
createTodayRateFile();

// Enhanced startup logging
console.log("üöÄ Iniciando Bot de WhatsApp de Tecno Inversiones...");
console.log("üìã Respuestas configuradas:", Object.keys(response).length);
console.log("üåê Idioma: Espa√±ol");
console.log("üì± Funcionalidades: Fase 1 completa con flujos conversacionales");
console.log("üíæ Base de datos: Inicializada con sesiones de usuario");
console.log(
  "üîÑ Estados de sesi√≥n disponibles:",
  Object.values(SESSION_STATES).length
);
console.log("üìà Tasas cargadas para:", dailyRates.date);
console.log("üóÇÔ∏è Pa√≠ses soportados:", Object.keys(countries).length);
console.log("ü§ñ Detecci√≥n emocional: Activada");
console.log("üîê Verificaci√≥n KYC: Configurada");
console.log("üí∞ C√°lculos de efectivo: Habilitados");
console.log("üìä Sistema de logs: Activo");
console.log("üßπ Limpieza autom√°tica: Programada");

// Start the WhatsApp connection
connectToWhatsApp();

// Export functions for testing (if needed)
if (typeof module !== "undefined" && module.exports) {
  module.exports = {
    detectEmotionalState,
    calculateRate,
    validateBeneficiaryInfo,
    detectReceiptMessage,
    isReceiptProperlySigned,
    handleRateSituation,
    calculateCashDeliveryEnhanced,
    extractAmount,
    detectCountry,
    getCountryDisplayName,
    checkKYCRequirement,
    formatCurrency,
    isNetAmountIntent,
    handleHighAmountVerification,
    handleBusinessInquiries,
    handleComplaintOrIssue,
    handleSecurityConcerns,
    detectUrgentRequest,
  };
}
